AWSTemplateFormatVersion: '2010-09-09'
Description: Old architecture compute module

Resources:
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Join
        - '-'
        - - ec2-keypair
          - !ImportValue old-arch-params:prj
          - !ImportValue old-arch-params:env
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - ec2-keypair
              - !ImportValue old-arch-params:prj
              - !ImportValue old-arch-params:env
        - Key: Project
          Value: !ImportValue old-arch-params:prj
        - Key: Environment
          Value: !ImportValue old-arch-params:env
  LaunchTemplate:
      Type: AWS::EC2::LaunchTemplate
      Properties:
        LaunchTemplateName: !Join
          - '-'
          - - alb-launch-template
            - !ImportValue old-arch-params:prj
            - !ImportValue old-arch-params:env
        LaunchTemplateData:
          InstanceType: !ImportValue old-arch-params:instance-type
          ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
          KeyName: !Ref KeyPair
          SecurityGroupIds:
            - !ImportValue old-arch-params:ec2-sg
          IamInstanceProfile: 
            Name: !ImportValue old-arch-params:bh-iam-instance-profile
          UserData: !Base64
            Fn::Sub:
              - |
                #!/bin/bash

                sudo yum update -y
                sudo yum install -y python3-pip aws-cli

                sudo pip3 install flask pymysql flask-cors

                # Imposta le variabili
                DB_ENDPOINT="${DB_ENDPOINT}"
                DB_NAME="${DB_NAME}"
                DB_USER="${DB_USER}"
                REGION="${REGION}"
                DB_PASSWORD_SECRET_ID="${DB_PASSWORD_SECRET_ID}"
                S3_APP_ZIP_PATH="${S3_APP_ZIP_PATH}"

                # Recupera la password del database da AWS Secrets Manager
                DB_PASSWORD=$(aws secretsmanager get-secret-value --region "${REGION}" --secret-id "${DB_PASSWORD_SECRET_ID}" --query SecretString --output text)

                # Scarica l'applicazione Python da S3
                aws s3 cp s3://"${S3_APP_ZIP_PATH}"/app.py /home/ec2-user/app.py

                # Rendi eseguibile lo script Python
                chmod +x /home/ec2-user/app.py

                # Esporta le variabili d'ambiente
                export DB_ENDPOINT
                export DB_NAME
                export DB_USER
                export DB_PASSWORD

                # Avvia l'applicazione in background e reindirizza l'output ai log
                nohup python3 /home/ec2-user/app.py > /home/ec2-user/app.log 2>&1 &
                
              - DB_ENDPOINT: !ImportValue old-arch-params:db-endpoint
                DB_NAME: !ImportValue old-arch-params:db-name
                DB_USER: !ImportValue old-arch-params:db-user
                REGION: !ImportValue old-arch-params:region
                DB_PASSWORD_SECRET_ID: !ImportValue old-arch-params:db-password-secret-id
                S3_APP_ZIP_PATH: !ImportValue old-arch-params:frontend-bucket-arn

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join
        - '-'
        - - tg
          - !ImportValue old-arch-params:prj
          - !ImportValue old-arch-params:env
      VpcId: !ImportValue old-arch-params:vpc-id
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-399
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - alb-tg
              - !ImportValue old-arch-params:prj
              - !ImportValue old-arch-params:env
        - Key: Project
          Value: !ImportValue old-arch-params:prj
        - Key: Environment
          Value: !ImportValue old-arch-params:env
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !ImportValue old-arch-params:private-subnet-a-id
        - !ImportValue old-arch-params:private-subnet-b-id
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 4
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - alb-asg-ec2
              - !ImportValue old-arch-params:prj
              - !ImportValue old-arch-params:env
          PropagateAtLaunch: true
        - Key: Project
          Value: !ImportValue old-arch-params:prj
          PropagateAtLaunch: true
        - Key: Environment
          Value: !ImportValue old-arch-params:env
          PropagateAtLaunch: true
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join
        - '-'
        - - alb
          - !ImportValue old-arch-params:prj
          - !ImportValue old-arch-params:env
      Subnets:
        - !ImportValue old-arch-params:public-subnet-a-id
        - !ImportValue old-arch-params:public-subnet-b-id
      SecurityGroups:
        - !ImportValue old-arch-params:alb-sg
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - alb
              - !ImportValue old-arch-params:prj
              - !ImportValue old-arch-params:env
        - Key: Project
          Value: !ImportValue old-arch-params:prj
        - Key: Environment
          Value: !ImportValue old-arch-params:env
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyPair
      SubnetId: !ImportValue old-arch-params:public-subnet-a-id
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
      SecurityGroupIds:
        - !ImportValue old-arch-params:alb-sg
        - !ImportValue old-arch-params:ec2-sg
      IamInstanceProfile: !ImportValue old-arch-params:bh-iam-instance-profile
      UserData: !Base64
        Fn::Sub:
          - |
            #!/bin/bash

            DB_ENDPOINT="rds-storm-old-arch-dev.cyus0cdasxeu.eu-west-1.rds.amazonaws.com"
            DB_NAME="mydatabase"
            DB_USER="admin"
            REGION="eu-west-1"
            DB_PASSWORD_SECRET_ID="arn:aws:secretsmanager:eu-west-1:729993278071:secret:RDS/DB/password/storm-old-arch/dev-IC5CZA"

            # Installa AWS CLI se non è già installato
            sudo yum install -y awscli

            # Recupera la password del database da AWS Secrets Manager
            DB_PASSWORD=$(aws secretsmanager get-secret-value --region "$REGION" --secret-id "$DB_PASSWORD_SECRET_ID" --query SecretString --output text)

            # Aggiorna il sistema e installa il client MySQL
            sudo yum update -y
            sudo yum install -y mysql

            # Installa Python 3 e il pacchetto pymysql (se necessario)
            yum install -y python3 python3-pip
            sudo pip3 install pymysql

            # Attende che il database sia disponibile
            until mysql -h "$DB_ENDPOINT" -u "$DB_USER" -p"$DB_PASSWORD" -e "SELECT 1" &> /dev/null
            do
              echo "In attesa che il database sia disponibile..."
              sleep 10
            done

            # Esegui i comandi MySQL per configurare il database
            mysql -h "$DB_ENDPOINT" -u "$DB_USER" -p"$DB_PASSWORD" <<EOF
            CREATE DATABASE IF NOT EXISTS $DB_NAME;
            USE $DB_NAME;
            CREATE TABLE IF NOT EXISTS example_table (
              id INT AUTO_INCREMENT PRIMARY KEY,
              animale VARCHAR(255) NOT NULL,
              verso VARCHAR(255) NOT NULL
            );
            INSERT INTO example_table (animale, verso) VALUES
              ('gatto', 'miao'),
              ('cane', 'bau'),
              ('coccodrillo', '???');
            EOF
            
          - DB_ENDPOINT: !ImportValue old-arch-params:db-endpoint
            DB_NAME: !ImportValue old-arch-params:db-name
            DB_USER: !ImportValue old-arch-params:db-user
            REGION: !ImportValue old-arch-params:region
            DB_PASSWORD_SECRET_ID: !ImportValue old-arch-params:db-password-secret-id
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - bh
              - !ImportValue old-arch-params:prj
              - !ImportValue old-arch-params:env
        - Key: Project
          Value: !ImportValue old-arch-params:prj
        - Key: Environment
          Value: !ImportValue old-arch-params:env
Outputs:
  ALBUrl:
    Description: ALB url
    Value: !Sub http://${ALB.DNSName}